/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface NovelManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptedSubmissions"
      | "decentralizedNovelChapter"
      | "decentralizedNovelVoteToken"
      | "getAcceptedSubmissions"
      | "getSubmission"
      | "hasVoted"
      | "isNFTAddressSet"
      | "isVoteTokenAddressSet"
      | "owner"
      | "renounceOwnership"
      | "setNFTAddress"
      | "setVoteTokenAddress"
      | "submissions"
      | "submit"
      | "transferOwnership"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NewSubmissionAccepted" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptedSubmissions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decentralizedNovelChapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decentralizedNovelVoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAcceptedSubmissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isNFTAddressSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVoteTokenAddressSet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoteTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submissions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "submit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "acceptedSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decentralizedNovelChapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decentralizedNovelVoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAcceptedSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNFTAddressSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVoteTokenAddressSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoteTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace NewSubmissionAcceptedEvent {
  export type InputTuple = [
    chapterId: BigNumberish,
    author: AddressLike,
    content: string
  ];
  export type OutputTuple = [
    chapterId: bigint,
    author: string,
    content: string
  ];
  export interface OutputObject {
    chapterId: bigint;
    author: string;
    content: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NovelManagement extends BaseContract {
  connect(runner?: ContractRunner | null): NovelManagement;
  waitForDeployment(): Promise<this>;

  interface: NovelManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptedSubmissions: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { author: string; content: string }],
    "view"
  >;

  decentralizedNovelChapter: TypedContractMethod<[], [string], "view">;

  decentralizedNovelVoteToken: TypedContractMethod<[], [string], "view">;

  getAcceptedSubmissions: TypedContractMethod<
    [],
    [[string[], string[]]],
    "view"
  >;

  getSubmission: TypedContractMethod<
    [index: BigNumberish],
    [
      [string, string, boolean, bigint] & {
        author: string;
        content: string;
        accepted: boolean;
        yesVotes: bigint;
      }
    ],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [submissionIndex: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;

  isNFTAddressSet: TypedContractMethod<[], [boolean], "view">;

  isVoteTokenAddressSet: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setNFTAddress: TypedContractMethod<
    [nftAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setVoteTokenAddress: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  submissions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, boolean, bigint] & {
        targetChapterId: bigint;
        author: string;
        content: string;
        accepted: boolean;
        yesVotes: bigint;
      }
    ],
    "view"
  >;

  submit: TypedContractMethod<[_content: string], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [submissionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptedSubmissions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { author: string; content: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "decentralizedNovelChapter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decentralizedNovelVoteToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAcceptedSubmissions"
  ): TypedContractMethod<[], [[string[], string[]]], "view">;
  getFunction(
    nameOrSignature: "getSubmission"
  ): TypedContractMethod<
    [index: BigNumberish],
    [
      [string, string, boolean, bigint] & {
        author: string;
        content: string;
        accepted: boolean;
        yesVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [submissionIndex: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isNFTAddressSet"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVoteTokenAddressSet"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNFTAddress"
  ): TypedContractMethod<[nftAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVoteTokenAddress"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submissions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, boolean, bigint] & {
        targetChapterId: bigint;
        author: string;
        content: string;
        accepted: boolean;
        yesVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submit"
  ): TypedContractMethod<[_content: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[submissionIndex: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "NewSubmissionAccepted"
  ): TypedContractEvent<
    NewSubmissionAcceptedEvent.InputTuple,
    NewSubmissionAcceptedEvent.OutputTuple,
    NewSubmissionAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "NewSubmissionAccepted(uint256,address,string)": TypedContractEvent<
      NewSubmissionAcceptedEvent.InputTuple,
      NewSubmissionAcceptedEvent.OutputTuple,
      NewSubmissionAcceptedEvent.OutputObject
    >;
    NewSubmissionAccepted: TypedContractEvent<
      NewSubmissionAcceptedEvent.InputTuple,
      NewSubmissionAcceptedEvent.OutputTuple,
      NewSubmissionAcceptedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
